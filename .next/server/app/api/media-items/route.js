"use strict";(()=>{var e={};e.id=4050,e.ids=[4050],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},31026:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>x,patchFetch:()=>y,requestAsyncStorage:()=>c,routeModule:()=>u,serverHooks:()=>h,staticGenerationAsyncStorage:()=>l});var a={};r.r(a),r.d(a,{GET:()=>m,dynamic:()=>p});var i=r(49303),s=r(88716),o=r(60670),n=r(87070),d=r(72331);let p="force-dynamic";async function m(e){try{let{searchParams:t}=new URL(e.url),r=t.get("typeId"),a=t.get("storeId");if(!r||!a)return n.NextResponse.json({error:"Type ID and Store ID are required"},{status:400});let i=await d._.mediaItem.findMany({where:{mediaItemTypeId:parseInt(r),mediaSpaces:{some:{storeId:parseInt(a)}}},include:{mediaItemType:!0,mediaSpaces:{where:{storeId:parseInt(a)}}}});return n.NextResponse.json(i)}catch(e){return console.error("Error fetching media items:",e),n.NextResponse.json({error:"Failed to fetch media items"},{status:500})}}let u=new i.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/media-items/route",pathname:"/api/media-items",filename:"route",bundlePath:"app/api/media-items/route"},resolvedPagePath:"/Users/joeym13/Documents/GitHub/ash/app/api/media-items/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:c,staticGenerationAsyncStorage:l,serverHooks:h}=u,x="/api/media-items/route";function y(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:l})}},72331:(e,t,r)=>{r.d(t,{_:()=>i});var a=r(53524);let i=globalThis.prisma??new a.PrismaClient({log:["query"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[9276,5972],()=>r(31026));module.exports=a})();