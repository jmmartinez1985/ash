"use strict";(()=>{var e={};e.id=7271,e.ids=[7271],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},82636:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>m,patchFetch:()=>x,requestAsyncStorage:()=>d,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>l});var s={};a.r(s),a.d(s,{POST:()=>c});var r=a(49303),n=a(88716),o=a(60670),i=a(87070),u=a(72331);async function c(){try{let e=new Date;e.setHours(0,0,0,0);let t=await u._.mediaSpace.findMany({where:{AND:[{status:"leased"},{leases:{some:{AND:[{statusId:{not:7}},{endDate:{lt:e}}]}}}]},select:{id:!0}}),a=await u._.$transaction([u._.lease.updateMany({where:{statusId:{not:7},endDate:{lt:e}},data:{statusId:7}}),u._.mediaSpace.updateMany({where:{id:{in:t.map(e=>e.id)}},data:{status:"available"}})]);return i.NextResponse.json({success:!0,completedLeases:a[0].count,updatedSpaces:a[1].count})}catch(e){return console.error("Error checking leases:",e),i.NextResponse.json({error:"Failed to check leases"},{status:500})}}let p=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/leases/check/route",pathname:"/api/leases/check",filename:"route",bundlePath:"app/api/leases/check/route"},resolvedPagePath:"/Users/joeym13/Documents/GitHub/ash/app/api/leases/check/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:l,serverHooks:h}=p,m="/api/leases/check/route";function x(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:l})}},72331:(e,t,a)=>{a.d(t,{_:()=>r});var s=a(53524);let r=globalThis.prisma??new s.PrismaClient({log:["query"]})}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[9276,5972],()=>a(82636));module.exports=s})();